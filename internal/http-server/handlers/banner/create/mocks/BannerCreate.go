// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "banner-service/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// BannerCreate is an autogenerated mock type for the BannerCreate type
type BannerCreate struct {
	mock.Mock
}

// CreateBanner provides a mock function with given fields: ctx, feature_id, tag_ids, is_active, content
func (_m *BannerCreate) CreateBanner(ctx context.Context, feature_id int64, tag_ids []int64, is_active bool, content entity.Content) (int64, error) {
	ret := _m.Called(ctx, feature_id, tag_ids, is_active, content)

	if len(ret) == 0 {
		panic("no return value specified for CreateBanner")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64, bool, entity.Content) (int64, error)); ok {
		return rf(ctx, feature_id, tag_ids, is_active, content)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, []int64, bool, entity.Content) int64); ok {
		r0 = rf(ctx, feature_id, tag_ids, is_active, content)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, []int64, bool, entity.Content) error); ok {
		r1 = rf(ctx, feature_id, tag_ids, is_active, content)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBannerCreate creates a new instance of BannerCreate. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBannerCreate(t interface {
	mock.TestingT
	Cleanup(func())
}) *BannerCreate {
	mock := &BannerCreate{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
